@using System.ComponentModel
@using AgendaApp.Models
@using Flurl.Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager UriHelper;

<div class="card mt-4">
    <h5 class="card-header">Add an agenda item</h5>
    <div class="card-body">
        <EditForm EditContext="@_editContext" OnValidSubmit="@HandleValidSubmitAsync" @onreset="HandleReset">
            <DataAnnotationsValidator />
            <div class="form-row">
                <div class="form-group col">
                    <label>Topic</label>
                    <InputText @bind-Value="_agendaItem.Name" DisplayName="Topic" class="form-control" />
                    <ValidationMessage For="@(() => _agendaItem.Name)" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>Description</label>
                    <InputText @bind-Value="_agendaItem.Description" class="form-control" />
                    <ValidationMessage For="@(() => _agendaItem.Description)" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>Presenter</label>
                    <InputText @bind-Value="_agendaItem.UserName" DisplayName="Presenter" class="form-control" />
                    <ValidationMessage For="@(() => _agendaItem.UserName)" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>Duration</label>
                    <InputSelect @bind-Value="_agendaItem.Duration" class="form-control">
                        <option value="@TimeSpan.FromMinutes(5)">5 minutes</option>
                        <option value="@TimeSpan.FromMinutes(10)">10 minutes</option>
                        <option value="@TimeSpan.FromMinutes(15)">15 minutes</option>
                        <option value="@TimeSpan.FromMinutes(20)">20 minutes</option>
                        <option value="@TimeSpan.FromMinutes(30)">30 minutes</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => _agendaItem.Duration)" />
                </div>
                <div class="form-group col">
                    <label>Order</label>
                    <InputNumber @bind-Value="_agendaItem.Order" DisplayName="Order" class="form-control" />
                    <ValidationMessage For="@(() => _agendaItem.Order)" />
                </div>
            </div>

            <button type="submit" class="btn btn-primary mr-1">Add</button>
            <button type="reset" class="btn btn-light">Cancel</button>
        </EditForm>
    </div>
</div>

@code {
    private AgendaItem _agendaItem = new AgendaItem { Duration = TimeSpan.FromMinutes(10) };
    private EditContext _editContext;

    [Parameter]
    public MicrosoftTeamsContext MicrosoftTeamsContext { get; set; }

    [Parameter]
    public short AgendaItemCount { get; set; }

    protected override void OnInitialized()
    {
        SetModelAndContext();
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("params set: ");

        if (MicrosoftTeamsContext != null)
        {
            Console.WriteLine("meetingId: " + MicrosoftTeamsContext.MeetingId);
            _agendaItem.MeetingId = MicrosoftTeamsContext.MeetingId;
        }
        _agendaItem.Order = AgendaItemCount;
        Console.WriteLine("AgendaItemCount: " + AgendaItemCount);

        base.OnParametersSet();
    }

    private async Task HandleValidSubmitAsync()
    {
        var agendaItem = _editContext.Model;
        foreach (PropertyDescriptor descriptor in TypeDescriptor.GetProperties(agendaItem))
        {
            Console.WriteLine($"\t {descriptor.Name}: {descriptor.GetValue(agendaItem)}");
        }

        var isValid = _editContext.Validate();
        if (isValid)
        {
            var token = await LocalStorage.GetItemAsync<string>("access_token");
            await $"http://localhost:3978/api/AgendaItem/Add"
                .WithOAuthBearerToken(token)
                .WithHeader("Content-type", "application/json")
                .PostJsonAsync(agendaItem);

            UriHelper.NavigateTo(UriHelper.Uri, forceLoad: true);
        }
        else
        {
            Console.WriteLine("invalid");
        }
    }

    private void HandleReset()
    {
        SetModelAndContext();
    }

    private void SetModelAndContext()
    {
        _agendaItem = new AgendaItem { Duration = TimeSpan.FromMinutes(10) };
        if (MicrosoftTeamsContext != null)
        {
            _agendaItem.MeetingId = MicrosoftTeamsContext.MeetingId;
        }
        _agendaItem.Order = AgendaItemCount;
        _editContext = new EditContext(_agendaItem);
    }

}
