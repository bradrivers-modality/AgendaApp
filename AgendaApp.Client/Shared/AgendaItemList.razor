@using AgendaApp.Models
@using Flurl.Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="list-group">
    @{
        if (_agendaItems == null)
        {
            <p>Loading agenda items...</p>
        }
        else if(_agendaItems.Count == 0)
        {
            <div class="card">
                <h5 class="card-header">No agenda items</h5>
            </div>
        }
        else
        {
            foreach (var agendaItem in _agendaItems)
            {
                <div class="list-group-item list-group-item-action flex-column align-items-start">
                    <div class="d-flex w-100 justify-content-between">
                        <h5 class="mb-1">@agendaItem.Name</h5>
                        <small>@agendaItem.Duration.Minutes.ToString() minutes</small>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(agendaItem.UserName))
                    {
                        <div>@agendaItem.Description</div>
                    }
                    <span class="badge badge-primary badge-pill float-right">@agendaItem.Order</span>
                    <small class="d-block mt-1">@agendaItem.UserName</small>
                </div>
            }
        }
    }

</div>

@code {
    private List<AgendaItem> _agendaItems;

    [Parameter]
    public MicrosoftTeamsContext MicrosoftTeamsContext { get; set; }

    [Parameter]
    public short AgendaItemCount { get; set; }

    [Parameter]
    public EventCallback<short> AgendaItemCountChanged { get; set; }

    private Task OnAgendaItemCountChangedAsync()
    {
        Console.WriteLine("AgendaItemCount changed: " + AgendaItemCount);
        return AgendaItemCountChanged.InvokeAsync(AgendaItemCount);
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("access_token");
        var result = await $"http://localhost:3978/api/AgendaItem/GetAllForMeeting?meetingId={MicrosoftTeamsContext.MeetingId}"
            .WithOAuthBearerToken(token)
            .GetJsonAsync<List<AgendaItem>>();

        _agendaItems = result.OrderBy(i => i.Order).ToList();
        Console.WriteLine("_agendaItems.Count: " + _agendaItems.Count);

        AgendaItemCount = Convert.ToInt16(_agendaItems.Count);
        await OnAgendaItemCountChangedAsync();

        await base.OnInitializedAsync();
    }

}